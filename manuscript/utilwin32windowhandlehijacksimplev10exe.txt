##  Util - Win32 Window Handle Hijack (simple) v1.0.exe 

After [Util - Windows Handles Viewer (with Child Windows)](http://diniscruz.blogspot.co.uk/2012/11/util-windows-handles-viewer-with-child.html), I **created a tool that allows the easy hijacking (or borrowing) of any Window/Control **(that is running in the same Logged-in user Window's Desktop )

This is possible due to  _Win32 **[SetParent](http://msdn.microsoft.com/en-gb/library/windows/desktop/ms633541(v=vs.85).aspx)'s**_ capability to allow a Win32 Window/Control to have a parent from a different process (see first examples of this technique in action in: [IBM AppScan Source's and AppScan Standard's TreeViews running side-by-site in the same GUI](http://diniscruz.blogspot.co.uk/2012/11/ibm-appscan-sources-and-appscan.html) and in [Injecting a .NET REPL into an Unmanaged/C++ application (Notepad)](http://diniscruz.blogspot.co.uk/2012/11/util-windows-handles-view-handle.html)

You can download the 1 Mb tool from:  [Util - Win32 Window Handle Hijack (simple) v1.0.exe](https://dl.dropbox.com/u/81532342/O2Platform%20Tools/Windows/Windows_Messages/Util%20-%20Win32%20Window%20Handle%20Hijack%20%28simple%29%20v1.0.exe)  


**Quick tour of this tool's capabilities.**

After opening the tool, the first GUI looks like this:

[![](images/CropperCapture_5B10_5D.jpg)](http://2.bp.blogspot.com/-XoOWSCxJn34/ULa_zhvBjlI/AAAAAAAAF24/zTGGgWssMlg/s1600/CropperCapture%5B10%5D.jpg)

  


Use the Target icon (via drag and drop) to select the desired window/control (from another running process)

For example, in the image below a _Windows Explorer File _list was chosen (from the _explorer.exe _process)  


  


[![](images/CropperCapture_5B12_5D.jpg)](http://3.bp.blogspot.com/-6hwVvMnVlww/ULa_3RhY10I/AAAAAAAAF3E/agBnoojUrTQ/s1600/CropperCapture%5B12%5D.jpg)

  
After clicking on the _Hijack _link, the _Windows Explorer File _is now going to 'exist' inside the [Util - Win32 Window Handle Hijack (simple) v1.0](https://dl.dropbox.com/u/81532342/O2Platform%20Tools/Windows/Windows_Messages/Util%20-%20Win32%20Window%20Handle%20Hijack%20%28simple%29%20v1.0.exe) .Net App

[![](images/CropperCapture_5B13_5D1.jpg)](http://1.bp.blogspot.com/-j6w6t8QvTmI/ULa_4Dt5FqI/AAAAAAAAF3M/tWa9TkgeLP8/s1600/CropperCapture%5B13%5D.jpg)

  
The _Restore _link, will reset the hijacked Window/Control to its original parent (in this case the _explorer.exe_ process)  


  


[![](images/CropperCapture_5B14_5D1.jpg)](http://4.bp.blogspot.com/-6kzulMzMLf4/ULa_5CiJTQI/AAAAAAAAF3U/jK_FjibKNKk/s1600/CropperCapture%5B14%5D.jpg)

  


  


This also works for other .Net Processes. In the example below, the ListBox from the left is being selected

[![](images/CropperCapture_5B20_5D.jpg)](http://1.bp.blogspot.com/-Nb8xZK2Tb-s/ULbAEGr8O1I/AAAAAAAAF4E/znG5JKCEzlY/s1600/CropperCapture%5B20%5D.jpg)

  
Clicking the _Hijack _link will set the ListBox parent to be the panel inside the app on the right (running on a different process)  


[![](images/CropperCapture_5B21_5D1.jpg)](http://2.bp.blogspot.com/-rjMrhmlzRV8/ULbAFIG0B4I/AAAAAAAAF4M/_GEly0LIoXE/s1600/CropperCapture%5B21%5D.jpg)

Note that the hijacked control is fully functional (with events correctly handled).

In the image below, the TreeView was expanded, with any event/actions triggered occurring on the original parent (to the left) .

[![](images/CropperCapture_5B22_5D1.jpg)](http://3.bp.blogspot.com/-DwlCEGNFIAE/ULbAGJBe8WI/AAAAAAAAF4U/LYVlXi8z2bU/s1600/CropperCapture%5B22%5D.jpg)

Basically the Hijacked _TreeView _still thinks that it is on the correct process and location) 
